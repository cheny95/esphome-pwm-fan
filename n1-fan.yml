substitutions:
  device_name: "N1 Fan"
  device_name_low: "n1-fan"
  comment: "N1 Fan"
  version: "1.0.0"
  speed_low: "50"
  speed_med: "75"
  speed_full: "100"
  
esphome:
  name: "${device_name_low}"
  project:
    name: "n1.fan_controller"
    version: "${version}"
  on_boot:
    then:
      - delay: 10s
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_low}"
      - delay: 5s
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_full}"

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "12345678"

wifi:
  ssid: !secret wifi_ssid  #WiFi SSID
  password: !secret wifi_password  #WiFi密码

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name_low}"
    password: "12345678"

captive_portal:

web_server:
  port: 80

#定义i2c pin口
i2c:
  sda: D6
  scl: D5
  scan: True

output:
  - platform: esp8266_pwm
    pin: D4
    frequency: 15000 Hz
    id: pwm_output

fan:
  - platform: speed
    id: fan_speed
    output: pwm_output
    speed_count: 100
    name: "${device_name} 开关"
   
number:
  - platform: template
    icon: "mdi:fan"
    id: speed_input
    name: "${device_name} 风速"
    lambda: |-
      return id(fan_speed).speed;
    step: 1
    min_value: 1
    max_value: 100
    unit_of_measurement: "%"
    update_interval: 1s
    set_action:
      then:
        - fan.turn_on:
            id: fan_speed
            speed: !lambda "return x;"
        - component.update: fanmode
        - component.update: sensor_fanspeed

select:
  - platform: template
    icon: "mdi:fan"
    name: "${device_name} 模式"
    id: fanmode
    update_interval: 1s
    lambda: |-
      if(id(fan_speed).speed <= ${speed_low})
        return std::string("Low");
      else if(id(fan_speed).speed == ${speed_med})
        return std::string("Medium");
      else if(id(fan_speed).speed >= ${speed_full})
        return std::string("Full");
      else
        return std::string("Custom");
    set_action:
      then:
        - lambda: |-
            auto call = id(fan_speed).turn_on();

            if(x == "Low")
              call.set_speed(${speed_low});
            else if(x == "Medium")
              call.set_speed(${speed_med});
            else if(x == "Full")
              call.set_speed(${speed_full});
            else
              call.set_speed(id(speed_input).state);
              
            call.perform();
        - component.update: speed_input
        - component.update: sensor_fanspeed
    options:
      - Low
      - Medium
      - Full
      - Custom

button:
  - platform: template
    icon: "mdi:fan-speed-1"
    name: "${device_name} Low"
    id: fanlow
    on_press:
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_low}"
  - platform: template
    icon: "mdi:fan-speed-2"
    name: "${device_name} Med"
    on_press:
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_med}"
  - platform: template
    icon: "mdi:fan-speed-3"
    name: "${device_name} Full"
    on_press:
      - fan.turn_on:
          id: fan_speed
          speed: "${speed_full}"
  - platform: restart
    name: "${device_name} 初始化"

sensor:
  - platform: template
    id: sensor_fanspeed
    icon: "mdi:fan"
    name: "风扇速度"
    lambda: |-
      return id(fan_speed).speed;
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: "%"
  - platform: shtcx
    temperature:
      name: "${device_name} Temperature"
    humidity:
      name: "${device_name} Humidity"
    address: 0x70
    update_interval: 5s #获取频率
    